buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'cn.home1.tools:maven-settings-decoder:1.0.5.OSS'
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE' apply(false)
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "net.linguica.maven-settings" version "0.5" apply(false)
    id 'pl.allegro.tech.build.axion-release' version '1.11.0'
}

project.group = 'com.maigroup.smartrent'
ext {
    set('springCloudVersion', "Hoxton.SR1")//todo: upgrade to Hoxton.SR3
}

ext.dockerRepoName = 'maimas'
ext.mavenGitHubID = 'github'
ext.mavenGitHubRepoURI = 'https://maven.pkg.github.com/maimas/mg-smartrent'
ext.mavenSettings = new cn.home1.tools.maven.SettingsDecoder();//GIT token used during release task by the axon plugin
ext.gitHubUser = ext.mavenSettings.getText("//server[id='${mavenGitHubID}']/username/text()")
ext.gitHubPass = ext.mavenSettings.getText("//server[id='${mavenGitHubID}']/password/text()")
scmVersion.repository.customUsername = ext.gitHubPass

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'application'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'net.linguica.maven-settings'
    apply plugin: 'pl.allegro.tech.build.axion-release'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    project.version = scmVersion.version

    repositories {
        maven {
            name = mavenGitHubID // must be equal to id in ~/.m2/settings.xml file!
            url = uri(mavenGitHubRepoURI)
        }
        mavenLocal()
        mavenCentral()
    }

    dependencies {

        //Lombok Dependencies
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompile 'org.projectlombok:lombok'
        testImplementation 'org.projectlombok:lombok'

        compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
        compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'


        testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
            exclude module: "spring-boot-starter-logging"
            exclude module: "logback-classic"
        }
        testImplementation(group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo')
        testImplementation(group: 'org.spockframework', name: 'spock-core', version: "${project['spockframework.version']}")
        testImplementation(group: 'org.spockframework', name: 'spock-spring', version: "${project['spockframework.version']}")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    /**
     * Workaround for Wind distribution.
     * Replace classpath libs definition with a folder location that contains all the libs to obtain a shorten value.
     */
    tasks.withType(CreateStartScripts).each { task ->
        task.doLast {
            task.windowsScript.write task.windowsScript.text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
            task.unixScript.write task.unixScript.text.replaceFirst(/(CLASSPATH=.APP_HOME\/lib\/).*/, { "CLASSPATH=\$(echo \$APP_HOME/lib/*.jar | tr ' ' ':')" })
        }
    }
}

task removeAllDockerImages(group: 'docker') {
    doLast {
        println "REMOVING ALL LOCAL DOCKER IMAGES"
        executeCommand(projectDir, "docker system prune -a -f")
    }
}

def manifestAttributes(String mainClass) {
    return [
            'Main-Class'              : mainClass,
            'Specification-Vendor'    : 'MaiGroup',
            'Specification-Vendor-URL': 'http://www.maigroup.com',
            'Specification-Version'   : version,
            'Implementation-Title'    : group,
            'Implementation-Vendor'   : 'MaiGroup',
            'Implementation-URL'      : 'http://www.maigroup.com',
            'Implementation-Version'  : version,
            'Created-By'              : "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
            'Built-By'                : System.getProperty("user.name"),
            'Build-Date'              : (new Date()).format("Y-MM-dd H:m:s")
    ]
}

def prepareDockerImage(File distZip, File targetDockerDistDir) {
    def ant = new groovy.util.AntBuilder()
    ant.invokeMethod("unzip", new HashMap() {
        {
            put("src", distZip.getPath());
            put("dest", targetDockerDistDir.getPath());
        }
    })
    def unzippedDirtyDir = targetDockerDistDir.listFiles()[0]
    unzippedDirtyDir.renameTo(new File(targetDockerDistDir, 'app'))
}

def buildDockerImage(File dockerFileDir, String imageName) {
    //removeDockerImage(imageName)
    println "BUILDING DOCKER IMAGE : $imageName"
    executeCommand(dockerFileDir, "docker build -t $imageName .")
    executeCommand(dockerFileDir, "docker images $imageName")
}

def releaseDockerImage(File dockerFileDir, String imageName) {
    println "RELEASING DOCKER IMAGE : $imageName"
    if (!imageName.toUpperCase().contains("SNAPSHOT")) {
        executeCommand(dockerFileDir, "docker push $imageName")
    }
}

def removeDockerImage(String dockerImageName) {
    println "REMOVING LOCAL DOCKER IMAGE"
    executeCommand(projectDir, "docker rmi -f $dockerImageName")
}

def executeCommand(File dir, String command, String[] args = {}) {
    println(command)
    Process process = command.execute(args, dir)
    def out = new StringBuffer()
    def err = new StringBuffer()
    process.consumeProcessOutput(out, err)
    process.waitFor()
    if (out.size() > 0) println out
    if (err.size() > 0) println err
}

